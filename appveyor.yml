# reference: https://www.appveyor.com/docs/appveyor-yml/

version: 1.0.{build}

# build all branches by default

image:
  - Visual Studio 2019
  - Visual Studio 2017
  # - Visual Studio 2013
platform: x64
configuration: Release

clone_folder: c:\projects\py_slvs-wheels
clone_depth: 3

# pick as per https://www.appveyor.com/docs/build-environment/#python
environment:
  PYPI_PASSWORD:
    secure: ubqvSWQzaXFiM5XOaavYRQ==
  
  PYPI_USERNAME: realthunder

  matrix:
  # - PYTHON_VERSION_MAJOR: 2
  #   PYTHON_VERSION_MINOR: 7
  #   PY_PREFIX: C:\Python27
  #   CMAKE_GENERATOR: "Visual Studio 12 2013"
  #
  # - PYTHON_VERSION_MAJOR: 2
  #   PYTHON_VERSION_MINOR: 7
  #   PY_PREFIX: C:\Python27-x64
  #   CMAKE_GENERATOR: "Visual Studio 12 2013 Win64"

  # - PYTHON_VERSION_MAJOR: 3
  #   PYTHON_VERSION_MINOR: 5
  #   PY_PREFIX: C:\Python35
  #
  # - PYTHON_VERSION_MAJOR: 3
  #   PYTHON_VERSION_MINOR: 5
  #   CONDA_PREFIX: C:\Python35-x64
  #
  # - PYTHON_VERSION_MAJOR: 3
  #   PYTHON_VERSION_MINOR: 6
  #   PY_PREFIX: C:\Python36
  #
  # - PYTHON_VERSION_MAJOR: 3
  #   PYTHON_VERSION_MINOR: 6
  #   PY_PREFIX: C:\Python36-x64
  #
  # - PYTHON_VERSION_MAJOR: 3
  #   PYTHON_VERSION_MINOR: 7
  #   PY_PREFIX: C:\Python37
  #
  # - PYTHON_VERSION_MAJOR: 3
  #   PYTHON_VERSION_MINOR: 7
  #   PY_PREFIX: C:\Python37-x64
  #
  - PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 8
    PY_PREFIX: C:\Python38
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_ARCH: "-Ax86"

  - PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 8
    PY_PREFIX: C:\Python38-x64
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_ARCH: "-Ax64"

  - PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 9
    PY_PREFIX: C:\Python39
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_ARCH: "-Ax86"

  - PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 9
    PY_PREFIX: C:\Python39-x64
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_ARCH: "-Ax64"

  - PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 10
    PY_PREFIX: C:\Python310
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_ARCH: "-Ax86"

  - PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 10
    PY_PREFIX: C:\Python310-x64
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_ARCH: "-Ax64"

matrix:
  exclude:
  # - image: Visual Studio 2013
  #   PYTHON_VERSION_MAJOR: 3
  # - image: Visual Studio 2017
  #   PYTHON_VERSION_MAJOR: 2
  # - image: Visual Studio 2019
  #   PYTHON_VERSION_MAJOR: 2
  - image: Visual Studio 2017 
    PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 8
  - image: Visual Studio 2017 
    PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 9
  - image: Visual Studio 2019 
    PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 5
  - image: Visual Studio 2019 
    PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 6
  - image: Visual Studio 2019 
    PYTHON_VERSION_MAJOR: 3
    PYTHON_VERSION_MINOR: 7

before_build:
  - set PATH=%PY_PREFIX%;%PY_PREFIX%/Scripts;%PATH% 
  - pip install --quiet scikit-build
  - curl -Lfso swig.zip https://downloads.sourceforge.net/project/swig/swigwin/swigwin-4.0.1/swigwin-4.0.1.zip
  - 7z x swig.zip -y
  - move swigwin-4.0.1 C:\
  - set PATH=C:\swigwin-4.0.1;%PATH%

install:
- set repo_dir=py_slvs
# - set build_commit=ed6635d59411abfb0eb650cdc192b865aaab410c
- git submodule update --init %repo_dir%
- cd %repo_dir%
# - git fetch origin
# - git checkout %build_commit%
# - git clean -fxd
# - git reset --hard
- git submodule update --init slvs
- cd ..

build_script:
# Build and test onnx.
- cd c:\projects\py_slvs-wheels\py_slvs
- set PATH=%PY_PREFIX%;%PY_PREFIX%/Scripts;%PATH% 
- python setup.py bdist_wheel --universal --dist-dir . -- -G "%CMAKE_GENERATOR%" %CMAKE_ARCH%
- pip uninstall -y py_slvs || ver>nul
- dir /b /a-d "*.whl" >WheelFile.txt & set /p _wheel= < WheelFile.txt
- pip install %_wheel%
- python -c "import py_slvs"

artifacts:
  - path: 'py_slvs\*.whl'
    name: PySlvsWheel

# publish artifacts
after_test:
- set REPO=https://upload.pypi.org/legacy/
- set TESTREPO=https://test.pypi.org/legacy/
- set USERNAME=%PYPI_USERNAME%
- set PATH=%PY_PREFIX%;%PY_PREFIX%/Scripts;%PATH% 
# Ensure only master branch can trigger build
- >
  IF "%APPVEYOR_REPO_BRANCH%" == "master"
  (
  IF "%APPVEYOR_REPO_TAG%" == "true"
  (
  python -m pip install twine &&
  set HOME=%USERPROFILE% &&
  python -m twine upload --verbose --skip-existing %_wheel% --repository-url %REPO% -u %USERNAME% -p %PYPI_PASSWORD%
  )
  )
- >
  IF "%APPVEYOR_REPO_BRANCH%" == "pypi_test_win"
  (
  python -m pip install twine &&
  set HOME=%USERPROFILE% &&
  python -m twine upload --verbose --skip-existing %_wheel% --repository-url %TESTREPO% -u %USERNAME% -p %PYPI_PASSWORD%
  )
- echo TASK COMPLETED
